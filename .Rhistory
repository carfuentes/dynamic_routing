write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = FALSE,quote = FALSE)
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = TRUE,quote = FALSE)
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row_names=TRUE,col.names = FALSE,quote = FALSE)
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=TRUE,col.names = FALSE,quote = FALSE)
#create a dictionary for the edge_list
edge_dict <- vector(mode="list", length=length(ann_dict_res$ALIAS))
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
#table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict<-table_mapping$ENTREZID
names(edge_dict) <- gsub("mir", "hsa-miR", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
edge_dict
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=TRUE,col.names = FALSE,quote = FALSE)
list(edge_dict)
list(names(edge_dict)=edge_dict)
#table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict<-table_mapping$ENTREZID
names(edge_dict) <- gsub("mir", "hsa-miR", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=TRUE,col.names = FALSE,quote = FALSE)
## write in a file the edge_dict
as.data.frame(edge_dict)
## write in a file the edge_dict
as.data.frame(edge_dict,row.names = names(edge_dict))
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=names(edge_dict),col.names = FALSE,quote = FALSE)
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
##get dict para el dynamical routing
geneIDs_to_dict <- geneIDs[1:10]
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
logical.return = FALSE, warn.conflicts = TRUE, quietly = FALSE,
verbose = getOption("verbose"))
{
testRversion <- function(pkgInfo, pkgname, pkgpath) {
if (is.null(built <- pkgInfo$Built))
stop(gettextf("package %s has not been installed properly\n",
sQuote(pkgname)), call. = FALSE, domain = NA)
R_version_built_under <- as.numeric_version(built$R)
if (R_version_built_under < "3.0.0")
stop(gettextf("package %s was built before R 3.0.0: please re-install it",
sQuote(pkgname)), call. = FALSE, domain = NA)
current <- getRversion()
if (length(Rdeps <- pkgInfo$Rdepends2)) {
for (dep in Rdeps) if (length(dep) > 1L) {
target <- dep$version
res <- if (is.character(target)) {
do.call(dep$op, list(as.numeric(R.version[["svn rev"]]),
as.numeric(sub("^r", "", dep$version))))
}
else {
do.call(dep$op, list(current, as.numeric_version(target)))
}
if (!res)
stop(gettextf("This is R %s, package %s needs %s %s",
current, sQuote(pkgname), dep$op, target),
call. = FALSE, domain = NA)
}
}
if (R_version_built_under > current)
warning(gettextf("package %s was built under R version %s",
sQuote(pkgname), as.character(built$R)), call. = FALSE,
domain = NA)
platform <- built$Platform
r_arch <- .Platform$r_arch
if (.Platform$OS.type == "unix") {
if (!nzchar(r_arch) && grepl("\\w", platform) &&
!testPlatformEquivalence(platform, R.version$platform))
stop(gettextf("package %s was built for %s",
sQuote(pkgname), platform), call. = FALSE,
domain = NA)
}
else {
if (nzchar(platform) && !grepl("mingw", platform))
stop(gettextf("package %s was built for %s",
sQuote(pkgname), platform), call. = FALSE,
domain = NA)
}
if (nzchar(r_arch) && file.exists(file.path(pkgpath,
"libs")) && !file.exists(file.path(pkgpath, "libs",
r_arch)))
stop(gettextf("package %s is not installed for 'arch = %s'",
sQuote(pkgname), r_arch), call. = FALSE, domain = NA)
}
testFeatures <- function(features, pkgInfo, pkgname, pkgpath) {
needsComp <- as.character(pkgInfo$DESCRIPTION["NeedsCompilation"])
if (identical(needsComp, "yes")) {
internalsID <- features$internalsID
if (is.null(internalsID))
internalsID <- "0310d4b8-ccb1-4bb8-ba94-d36a55f60262"
if (internalsID != .Internal(internalsID()))
stop(gettextf("package %s was installed by an R version with different internals; it needs to be reinstalled for use with this R version",
sQuote(pkgname)), call. = FALSE, domain = NA)
}
}
checkNoGenerics <- function(env, pkg) {
nenv <- env
ns <- .getNamespace(as.name(pkg))
if (!is.null(ns))
nenv <- asNamespace(ns)
if (exists(".noGenerics", envir = nenv, inherits = FALSE))
TRUE
else {
!any(startsWith(names(env), ".__T"))
}
}
checkConflicts <- function(package, pkgname, pkgpath, nogenerics,
env) {
dont.mind <- c("last.dump", "last.warning", ".Last.value",
".Random.seed", ".Last.lib", ".onDetach", ".packageName",
".noGenerics", ".required", ".no_S3_generics", ".Depends",
".requireCachedGenerics")
sp <- search()
lib.pos <- which(sp == pkgname)
ob <- names(as.environment(lib.pos))
if (!nogenerics) {
these <- ob[startsWith(ob, ".__T__")]
gen <- gsub(".__T__(.*):([^:]+)", "\\1", these)
from <- gsub(".__T__(.*):([^:]+)", "\\2", these)
gen <- gen[from != package]
ob <- ob[!(ob %in% gen)]
}
fst <- TRUE
ipos <- seq_along(sp)[-c(lib.pos, match(c("Autoloads",
"CheckExEnv"), sp, 0L))]
for (i in ipos) {
obj.same <- match(names(as.environment(i)), ob,
nomatch = 0L)
if (any(obj.same > 0)) {
same <- ob[obj.same]
same <- same[!(same %in% dont.mind)]
Classobjs <- which(startsWith(same, ".__"))
if (length(Classobjs))
same <- same[-Classobjs]
same.isFn <- function(where) vapply(same, exists,
NA, where = where, mode = "function", inherits = FALSE)
same <- same[same.isFn(i) == same.isFn(lib.pos)]
not.Ident <- function(ch, TRAFO = identity,
...) vapply(ch, function(.) !identical(TRAFO(get(.,
i)), TRAFO(get(., lib.pos)), ...), NA)
if (length(same))
same <- same[not.Ident(same)]
if (length(same) && identical(sp[i], "package:base"))
same <- same[not.Ident(same, ignore.environment = TRUE)]
if (length(same)) {
if (fst) {
fst <- FALSE
packageStartupMessage(gettextf("\nAttaching package: %s\n",
sQuote(package)), domain = NA)
}
msg <- .maskedMsg(sort(same), pkg = sQuote(sp[i]),
by = i < lib.pos)
packageStartupMessage(msg, domain = NA)
}
}
}
}
if (verbose && quietly)
message("'verbose' and 'quietly' are both true; being verbose then ..")
if (!missing(package)) {
if (is.null(lib.loc))
lib.loc <- .libPaths()
lib.loc <- lib.loc[dir.exists(lib.loc)]
if (!character.only)
package <- as.character(substitute(package))
if (length(package) != 1L)
stop("'package' must be of length 1")
if (is.na(package) || (package == ""))
stop("invalid package name")
pkgname <- paste0("package:", package)
newpackage <- is.na(match(pkgname, search()))
if (newpackage) {
pkgpath <- find.package(package, lib.loc, quiet = TRUE,
verbose = verbose)
if (length(pkgpath) == 0L) {
txt <- if (length(lib.loc))
gettextf("there is no package called %s",
sQuote(package))
else gettext("no library trees found in 'lib.loc'")
if (logical.return) {
warning(txt, domain = NA)
return(FALSE)
}
else stop(txt, domain = NA)
}
which.lib.loc <- normalizePath(dirname(pkgpath),
"/", TRUE)
pfile <- system.file("Meta", "package.rds", package = package,
lib.loc = which.lib.loc)
if (!nzchar(pfile))
stop(gettextf("%s is not a valid installed package",
sQuote(package)), domain = NA)
pkgInfo <- readRDS(pfile)
testRversion(pkgInfo, package, pkgpath)
ffile <- system.file("Meta", "features.rds", package = package,
lib.loc = which.lib.loc)
features <- if (file.exists(ffile))
readRDS(ffile)
else NULL
testFeatures(features, pkgInfo, package, pkgpath)
if (is.character(pos)) {
npos <- match(pos, search())
if (is.na(npos)) {
warning(gettextf("%s not found on search path, using pos = 2",
sQuote(pos)), domain = NA)
pos <- 2
}
else pos <- npos
}
.getRequiredPackages2(pkgInfo, quietly = quietly)
deps <- unique(names(pkgInfo$Depends))
if (packageHasNamespace(package, which.lib.loc)) {
if (isNamespaceLoaded(package)) {
newversion <- as.numeric_version(pkgInfo$DESCRIPTION["Version"])
oldversion <- as.numeric_version(getNamespaceVersion(package))
if (newversion != oldversion) {
res <- tryCatch(unloadNamespace(package),
error = function(e) {
P <- if (!is.null(cc <- conditionCall(e)))
paste("Error in", deparse(cc)[1L],
": ")
else "Error : "
stop(gettextf("Package %s version %s cannot be unloaded:\n %s",
sQuote(package), oldversion, paste0(P,
conditionMessage(e), "\n")), domain = NA)
})
}
}
tt <- tryCatch({
attr(package, "LibPath") <- which.lib.loc
ns <- loadNamespace(package, lib.loc)
env <- attachNamespace(ns, pos = pos, deps)
}, error = function(e) {
P <- if (!is.null(cc <- conditionCall(e)))
paste(" in", deparse(cc)[1L])
else ""
msg <- gettextf("package or namespace load failed for %s%s:\n %s",
sQuote(package), P, conditionMessage(e))
if (logical.return)
message(paste("Error:", msg), domain = NA)
else stop(msg, call. = FALSE, domain = NA)
})
if (logical.return && is.null(tt))
return(FALSE)
attr(package, "LibPath") <- NULL
{
on.exit(detach(pos = pos))
nogenerics <- !.isMethodsDispatchOn() || checkNoGenerics(env,
package)
if (warn.conflicts && !exists(".conflicts.OK",
envir = env, inherits = FALSE))
checkConflicts(package, pkgname, pkgpath,
nogenerics, ns)
on.exit()
if (logical.return)
return(TRUE)
else return(invisible(.packages()))
}
}
else stop(gettextf("package %s does not have a namespace and should be re-installed",
sQuote(package)), domain = NA)
}
if (verbose && !newpackage)
warning(gettextf("package %s already present in search()",
sQuote(package)), domain = NA)
}
else if (!missing(help)) {
if (!character.only)
help <- as.character(substitute(help))
pkgName <- help[1L]
pkgPath <- find.package(pkgName, lib.loc, verbose = verbose)
docFiles <- c(file.path(pkgPath, "Meta", "package.rds"),
file.path(pkgPath, "INDEX"))
if (file.exists(vignetteIndexRDS <- file.path(pkgPath,
"Meta", "vignette.rds")))
docFiles <- c(docFiles, vignetteIndexRDS)
pkgInfo <- vector("list", 3L)
readDocFile <- function(f) {
if (basename(f) %in% "package.rds") {
txt <- readRDS(f)$DESCRIPTION
if ("Encoding" %in% names(txt)) {
to <- if (Sys.getlocale("LC_CTYPE") == "C")
"ASCII//TRANSLIT"
else ""
tmp <- try(iconv(txt, from = txt["Encoding"],
to = to))
if (!inherits(tmp, "try-error"))
txt <- tmp
else warning("'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible",
call. = FALSE)
}
nm <- paste0(names(txt), ":")
formatDL(nm, txt, indent = max(nchar(nm, "w")) +
3L)
}
else if (basename(f) %in% "vignette.rds") {
txt <- readRDS(f)
if (is.data.frame(txt) && nrow(txt))
cbind(basename(gsub("\\.[[:alpha:]]+$", "",
txt$File)), paste(txt$Title, paste0(rep.int("(source",
NROW(txt)), ifelse(nzchar(txt$PDF), ", pdf",
""), ")")))
else NULL
}
else readLines(f)
}
for (i in which(file.exists(docFiles))) pkgInfo[[i]] <- readDocFile(docFiles[i])
y <- list(name = pkgName, path = pkgPath, info = pkgInfo)
class(y) <- "packageInfo"
return(y)
}
else {
if (is.null(lib.loc))
lib.loc <- .libPaths()
db <- matrix(character(), nrow = 0L, ncol = 3L)
nopkgs <- character()
for (lib in lib.loc) {
a <- .packages(all.available = TRUE, lib.loc = lib)
for (i in sort(a)) {
file <- system.file("Meta", "package.rds", package = i,
lib.loc = lib)
title <- if (nzchar(file)) {
txt <- readRDS(file)
if (is.list(txt))
txt <- txt$DESCRIPTION
if ("Encoding" %in% names(txt)) {
to <- if (Sys.getlocale("LC_CTYPE") == "C")
"ASCII//TRANSLIT"
else ""
tmp <- try(iconv(txt, txt["Encoding"], to,
"?"))
if (!inherits(tmp, "try-error"))
txt <- tmp
else warning("'DESCRIPTION' has an 'Encoding' field and re-encoding is not possible",
call. = FALSE)
}
txt["Title"]
}
else NA
if (is.na(title))
title <- " ** No title available ** "
db <- rbind(db, cbind(i, lib, title))
}
if (length(a) == 0L)
nopkgs <- c(nopkgs, lib)
}
dimnames(db) <- list(NULL, c("Package", "LibPath", "Title"))
if (length(nopkgs) && !missing(lib.loc)) {
pkglist <- paste(sQuote(nopkgs), collapse = ", ")
msg <- sprintf(ngettext(length(nopkgs), "library %s contains no packages",
"libraries %s contain no packages"), pkglist)
warning(msg, domain = NA)
}
y <- list(header = NULL, results = db, footer = NULL)
class(y) <- "libraryIQR"
return(y)
}
if (logical.return)
TRUE
else invisible(.packages())
}
setwd("~/Documentos/TFM/dynamic_routing")
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GOstats)
library(DBI)
library(org.Hs.eg.db)
library(xtable)
library(microRNA)
library(mirbase.db)
library(RmiR.Hs.miRNA)
library(Homo.sapiens)
library(topGO)
library(plyr)
browseVignettes("GOstats")
get_genes_annotations <- function(set_genes, db) {
ann_dict <- vector(mode="list", length=length(keytypes(db)))
for(column in 1:length(keytypes(db))) {
allGeneID <- keys(db, keytype = keytypes(db)[column])
set_genes_id <- set_genes[set_genes %in% allGeneID]
head(set_genes_id)
names(ann_dict)[column]=keytypes(db)[column]
ann_dict[[column]]<-set_genes_id
}
return(ann_dict)
}
##TODOS LOS GENES
#carga los datos de todos los genes
all_geneIDs<-scan("all_gene_ENCODE",what="character")
all_geneIDs<-all_geneIDs[3:16358]
#Get the genes by annotation
ann_dict<- get_genes_annotations(all_geneIDs, org.Hs.eg.db)
#Unify all of them in a vector in ENTREZID
mask_list<-sapply(ann_dict, function(x) identical(x,character(0)))
ann_dict<-ann_dict[!mask_list]
entrez_id<-sapply(names(ann_dict), function(x) select(org.Hs.eg.db, keys = ann_dict[[x]], columns = "ENTREZID", keytype = x)$ENTREZID, USE.NAMES=TRUE)
entrez_id_unlisted <-unique(unlist(entrez_id,use.names = FALSE))
##RESERVOIR GENES
#carga los datos del reservoir
res_geneIDs<-scan("genes_res_ENCODE",what="character")
#Get the genes by annotation
ann_dict_res<- get_genes_annotations(res_geneIDs, org.Hs.eg.db)
#Unify all of them in a vector in ENTREZID
mask_list_res<-sapply(ann_dict_res, function(x) identical(x,character(0)))
ann_dict_res<-ann_dict_res[!mask_list_res]
entrez_id_res<-sapply(names(ann_dict_res), function(x) select(org.Hs.eg.db, keys = ann_dict_res[[x]], columns = "ENTREZID", keytype = x)$ENTREZID, USE.NAMES=TRUE)
entrez_id_unlisted_res <-unique(unlist(entrez_id_res,use.names = FALSE))
##EDGE LIST
edge_list_res <- read.table("Dataset1/network_edge_list_ENCODE.csv",header=TRUE,fill = TRUE)
head(edge_list_res)
#create a dictionary for the edge_list
edge_dict <- vector(mode="list", length=length(ann_dict_res$ALIAS))
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
#table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict<-table_mapping$ENTREZID
names(edge_dict) <- gsub("mir", "hsa-miR", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=names(edge_dict),col.names = FALSE,quote = FALSE)
# 1. Build a parameter object
help("GOHyperGParams-class")
params <- new("GOHyperGParams", geneIds = entrez_id_unlisted_res, universeGeneIds = entrez_id_unlisted,
annotation = "org.Hs.eg.db", ontology = "BP", pvalueCutoff = 0.001, testDirection = "over")
conditional(params) <- TRUE # de la diapo siguiente: esta haciendo que es test sea conditional (sino lo
# 2. Run the functional enrichment analysis
hgOver <- hyperGTest(params)
geneCounts(hgOver)
hgOver
??hyperGTest
# 3. Store and visualize the results
htmlReport(hgOver, file = "gotests.html")
# the resulting object from a call to "hyperGTest" belong to the class of objects GOHyperGResult.
# We can access to this info using:
# therefore, storing the results in a data.frame object enables an automatic processing and filtering of the results:
goresults <- summary(hgOver)
head(goresults)
goresults <- goresults[goresults$Size >= 5 & goresults$Count >= 5, ]
goresults <- goresults[order(goresults$OddsRatio, decreasing = TRUE), ]
head(goresults)
goresults[1:10,]
head(geneCounts(hgOver))
# We can extract the genes that enrich each GO term and paste it to the result as follows:
geneIDs <- geneIdsByCategory(hgOver)[goresults$GOBPID]
head(geneIDs)
geneSYMs <- sapply(geneIDs, function(id) select(org.Hs.eg.db, columns = "ALIAS", key = id, keytype = "ENTREZID")$ALIAS)
geneSYMs <- sapply(geneSYMs, paste, collapse = ", ")
goresults <- cbind(goresults, Genes = geneSYMs)
sapply(geneIDs, function(id) id %in% entrez_id_unlisted_res)
##get dict para el dynamical routing
geneIDs_to_dict <- geneIDs[1:10]
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
write(geneId_to_file,"test.txt")
# We can generate an HTML page from a data.frame object using the xtable package:
library(xtable)
xtab <- xtable(goresults, align = "l|c|r|r|r|r|r|p{3cm}|p{3cm}|")
print(xtab, file = "goresults_table.html", type="html")
head(geneIDs)
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs$GO:0071277
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs$`GO:0071277`
geneIDs_to_dict
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs[[c(`GO:0071277`,`GO:0032481`)]]
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs[c(`GO:0071277`,`GO:0032481`)]
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs[c("GO:0071277","GO:0032481")]
geneIDs_to_dict
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
# We can extract the genes that enrich each GO term and paste it to the result as follows:
geneIDs <- geneIdsByCategory(hgOver)[goresults$GOBPID]
head(geneIDs)
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs[c("GO:0071277","GO:0032481")]
geneIDs_to_dict
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
write(geneId_to_file,"test.txt")
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs[c("GO:0070317","GO:0051591")]
geneIDs_to_dict
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
write(geneId_to_file,"test.txt")
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs[c("GO:0043044","GO:0042593")]
geneIDs_to_dict
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
write(geneId_to_file,"test.txt")
##get dict para el dynamical routing
#geneIDs_to_dict <- geneIDs[1:10]
geneIDs_to_dict <- geneIDs[c("GO:0070317","GO:0051591")]
geneIDs_to_dict
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
write(geneId_to_file,"test.txt")

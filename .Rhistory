library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GOstats)
library(DBI)
library(org.Hs.eg.db)
library(xtable)
library(microRNA)
library(mirbase.db)
library(RmiR.Hs.miRNA)
library(Homo.sapiens)
library(topGO)
get_genes_annotations <- function(set_genes, db) {
ann_dict <- vector(mode="list", length=length(keytypes(db)))
for(column in 1:length(keytypes(db))) {
allGeneID <- keys(db, keytype = keytypes(db)[column])
set_genes_id <- set_genes[set_genes %in% allGeneID]
head(set_genes_id)
names(ann_dict)[column]=keytypes(db)[column]
ann_dict[[column]]<-set_genes_id
}
return(ann_dict)
}
##EDGE LIST
edge_list_res <- read.table("Dataset1/network_edge_list_ENCODE.csv",header=TRUE,fill = TRUE)
##RESERVOIR GENES
#carga los datos del reservoir
res_geneIDs<-scan("genes_res_ENCODE",what="character")
setwd("~/Documentos/TFM/dynamic_routing")
##RESERVOIR GENES
#carga los datos del reservoir
res_geneIDs<-scan("genes_res_ENCODE",what="character")
#Get the genes by annotation
ann_dict_res<- get_genes_annotations(res_geneIDs, org.Hs.eg.db)
#Get the genes by annotation
ann_dict_res<- get_genes_annotations(res_geneIDs, org.Hs.eg.db)
ann_dict_res<-ann_dict_res[!mask_list_res]
#Unify all of them in a vector in ENTREZID
mask_list_res<-sapply(ann_dict_res, function(x) identical(x,character(0)))
ann_dict_res<-ann_dict_res[!mask_list_res]
entrez_id_res<-sapply(names(ann_dict_res), function(x) select(org.Hs.eg.db, keys = ann_dict_res[[x]], columns = "ENTREZID", keytype = x)$ENTREZID, USE.NAMES=TRUE)
someenv<-new.env()
someenv[["key"]]<-value
someenv[["key"]]<-2
View(someenv)
someenv[["key"]]
install.packages("plyr")
library(plyr)
##EDGE LIST
edge_list_res <- read.table("Dataset1/network_edge_list_ENCODE.csv",header=TRUE,fill = TRUE)
head(edge_list_res)
edge_list_res$Source_EZ <- mapvalues(edge_list_res$Soruce, from=ann_dict_res$ALIAS, to=entrez_id_res$ALIAS)
#create a dictionary for the edge_list
edge_dict <- vector(mode="list", length=length(ann_dict_res$ALIAS))
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict=table_mapping$ENTREZID
names(edge_dict)<-table_mapping$ALIAS
edge_dict
edge_dict=list(table_mapping$ENTREZID)
names(edge_dict)<-table_mapping$ALIAS
edge_dict<-table_mapping$ENTREZID)
edge_dict<-table_mapping$ENTREZID
names(edge_dict)<-table_mapping$ALIAS
edge_dict
edge_dict[["SP1"]]
edge_dict[[edge_list_res$Source]]
mapvalues(edge_list_res$Source, from=table_mapping$ALIAS,to=table_mapping$ENTREZID)
mapvalues(edge_list_res, from=table_mapping$ALIAS,to=table_mapping$ENTREZID)
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
edge_dict<-table_mapping$ENTREZID
names(edge_dict)<-table_mapping$ALIAS
edge_dict[["SP1"]]
edge_dict
source('~/Documentos/TFM/dynamic_routing/funtional_enrichment.R', echo=TRUE)
mapvalues(edge_list_res$Source, from=table_mapping$ALIAS,to=table_mapping$ENTREZID)
#create a dictionary for the edge_list
edge_dict <- vector(mode="list", length=length(ann_dict_res$ALIAS))
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict<-table_mapping$ENTREZID
names(edge_dict)<-table_mapping$ALIAS
edge_dict
edge_dict[[edge_list_res$Source]]
## write in a file the edge_dict
write(edge_dict,"mapping_id_to_entrez.txt")
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt")
# 1. Build a parameter object
help("GOHyperGParams-class")
params <- new("GOHyperGParams", geneIds = entrez_id_unlisted_res, universeGeneIds = entrez_id_unlisted,
annotation = "org.Hs.eg.db", ontology = "BP", pvalueCutoff = 0.001, testDirection = "over")
##TODOS LOS GENES
#carga los datos de todos los genes
all_geneIDs<-scan("all_gene_ENCODE",what="character")
all_geneIDs<-all_geneIDs[3:16358]
#Get the genes by annotation
ann_dict<- get_genes_annotations(all_geneIDs, org.Hs.eg.db)
#Unify all of them in a vector in ENTREZID
mask_list<-sapply(ann_dict, function(x) identical(x,character(0)))
ann_dict<-ann_dict[!mask_list]
entrez_id<-sapply(names(ann_dict), function(x) select(org.Hs.eg.db, keys = ann_dict[[x]], columns = "ENTREZID", keytype = x)$ENTREZID, USE.NAMES=TRUE)
entrez_id_unlisted <-unique(unlist(entrez_id,use.names = FALSE))
##RESERVOIR GENES
#carga los datos del reservoir
res_geneIDs<-scan("genes_res_ENCODE",what="character")
#Get the genes by annotation
ann_dict_res<- get_genes_annotations(res_geneIDs, org.Hs.eg.db)
#Unify all of them in a vector in ENTREZID
mask_list_res<-sapply(ann_dict_res, function(x) identical(x,character(0)))
ann_dict_res<-ann_dict_res[!mask_list_res]
entrez_id_res<-sapply(names(ann_dict_res), function(x) select(org.Hs.eg.db, keys = ann_dict_res[[x]], columns = "ENTREZID", keytype = x)$ENTREZID, USE.NAMES=TRUE)
entrez_id_unlisted_res <-unique(unlist(entrez_id_res,use.names = FALSE))
##EDGE LIST
edge_list_res <- read.table("Dataset1/network_edge_list_ENCODE.csv",header=TRUE,fill = TRUE)
head(edge_list_res)
#create a dictionary for the edge_list
edge_dict <- vector(mode="list", length=length(ann_dict_res$ALIAS))
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict<-table_mapping$ENTREZID
names(edge_dict)<-table_mapping$ALIAS
edge_dict[[edge_list_res$Source]]
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt")
# 1. Build a parameter object
help("GOHyperGParams-class")
params <- new("GOHyperGParams", geneIds = entrez_id_unlisted_res, universeGeneIds = entrez_id_unlisted,
annotation = "org.Hs.eg.db", ontology = "BP", pvalueCutoff = 0.001, testDirection = "over")
conditional(params) <- TRUE # de la diapo siguiente: esta haciendo que es test sea conditional (sino lo
# 2. Run the functional enrichment analysis
hgOver <- hyperGTest(params)
geneCounts(hgOver)
# the resulting object from a call to "hyperGTest" belong to the class of objects GOHyperGResult.
# We can access to this info using:
# therefore, storing the results in a data.frame object enables an automatic processing and filtering of the results:
goresults <- summary(hgOver)
head(goresults)
goresults <- goresults[goresults$Size >= 5 & goresults$Count >= 5, ]
goresults <- goresults[order(goresults$OddsRatio, decreasing = TRUE), ]
head(goresults)
head(geneCounts(hgOver))
# We can extract the genes that enrich each GO term and paste it to the result as follows:
geneIDs <- geneIdsByCategory(hgOver)[goresults$GOBPID]
head(geneIDs)
geneSYMs <- sapply(geneIDs, function(id) select(org.Hs.eg.db, columns = "ALIAS", key = id, keytype = "ENTREZID")$ALIAS)
geneSYMs <- sapply(geneSYMs, paste, collapse = ", ")
goresults <- cbind(goresults, Genes = geneSYMs)
sapply(geneIDs, function(id) id %in% entrez_id_unlisted_res)
head(geneIDs)
head(goresults)
##get dict para el dynamical routing
geneIDs_to_dict <- geneIDs[1:10]
write.table(geneIDs_to_dict,"go_terms_gene_ezid.txt")
write(geneIDs_to_dict,"go_terms_gene_ezid.txt")
sapply(mylist, write, "go_terms_gene_ezid.txt", append=TRUE, USE.NAMES = TRUE)
sapply(geneIDs_to_dict, write, "go_terms_gene_ezid.txt", append=TRUE, USE.NAMES = TRUE)
##get dict para el dynamical routing
geneIDs_to_dict <- geneIDs[1:10]
write.list(geneIDs_to_dict,"test.txt")
installed.packages("erer")
write.list(geneIDs_to_dict,"test.txt")
# We can generate an HTML page from a data.frame object using the xtable package:
library(erer)
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
write(geneId_to_file,"test.txt")
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = FALSE)
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = FALSE,quote = FALSE)
gsub("mir", "hsa-mir", names(edge_dict))
names(edge_dict)
names(edge_dict) <- gsub("mir", "hsa-mir", table_mapping$ALIAS)
edge_dict
names(edge_dict) <- gsub("mir|let", "hsa-mir", table_mapping$ALIAS)
edge_dict
names(edge_dict) <- gsub("mir|let", "hsa-mir|hsa-let", table_mapping$ALIAS)
edge_dict
names(edge_dict) <- gsub("mir", "hsa-mir", table_mapping$ALIAS)
edge_dict
names(edge_dict) <- gsub("let", "hsa-let", table_mapping$ALIAS)
edge_dict
names(edge_dict) <- gsub("mir", "hsa-mir", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", edge_dict)
edge_dict
names(edge_dict) <- gsub("mir", "hsa-mir", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
edge_dict
names(edge_dict) <- gsub("mir", "hsa-miR", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
edge_dict
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = FALSE,quote = FALSE)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GOstats)
library(DBI)
library(org.Hs.eg.db)
library(xtable)
library(microRNA)
library(mirbase.db)
library(RmiR.Hs.miRNA)
library(Homo.sapiens)
library(topGO)
library(plyr)
get_genes_annotations <- function(set_genes, db) {
ann_dict <- vector(mode="list", length=length(keytypes(db)))
for(column in 1:length(keytypes(db))) {
allGeneID <- keys(db, keytype = keytypes(db)[column])
set_genes_id <- set_genes[set_genes %in% allGeneID]
head(set_genes_id)
names(ann_dict)[column]=keytypes(db)[column]
ann_dict[[column]]<-set_genes_id
}
return(ann_dict)
}
##TODOS LOS GENES
#carga los datos de todos los genes
all_geneIDs<-scan("all_gene_ENCODE",what="character")
all_geneIDs<-all_geneIDs[3:16358]
#Get the genes by annotation
ann_dict<- get_genes_annotations(all_geneIDs, org.Hs.eg.db)
#Unify all of them in a vector in ENTREZID
mask_list<-sapply(ann_dict, function(x) identical(x,character(0)))
ann_dict<-ann_dict[!mask_list]
entrez_id<-sapply(names(ann_dict), function(x) select(org.Hs.eg.db, keys = ann_dict[[x]], columns = "ENTREZID", keytype = x)$ENTREZID, USE.NAMES=TRUE)
entrez_id_unlisted <-unique(unlist(entrez_id,use.names = FALSE))
##RESERVOIR GENES
#carga los datos del reservoir
res_geneIDs<-scan("genes_res_ENCODE",what="character")
#Get the genes by annotation
ann_dict_res<- get_genes_annotations(res_geneIDs, org.Hs.eg.db)
#Unify all of them in a vector in ENTREZID
mask_list_res<-sapply(ann_dict_res, function(x) identical(x,character(0)))
ann_dict_res<-ann_dict_res[!mask_list_res]
entrez_id_res<-sapply(names(ann_dict_res), function(x) select(org.Hs.eg.db, keys = ann_dict_res[[x]], columns = "ENTREZID", keytype = x)$ENTREZID, USE.NAMES=TRUE)
entrez_id_unlisted_res <-unique(unlist(entrez_id_res,use.names = FALSE))
##EDGE LIST
edge_list_res <- read.table("Dataset1/network_edge_list_ENCODE.csv",header=TRUE,fill = TRUE)
head(edge_list_res)
# 1. Build a parameter object
help("GOHyperGParams-class")
browseVignettes("GOstats")
# 1. Build a parameter object
help("GOHyperGParams-class")
params <- new("GOHyperGParams", geneIds = entrez_id_unlisted_res, universeGeneIds = entrez_id_unlisted,
annotation = "org.Hs.eg.db", ontology = "BP", pvalueCutoff = 0.001, testDirection = "over")
conditional(params) <- TRUE # de la diapo siguiente: esta haciendo que es test sea conditional (sino lo
# 2. Run the functional enrichment analysis
hgOver <- hyperGTest(params)
geneCounts(hgOver)
??hyperGTest
# 3. Store and visualize the results
htmlReport(hgOver, file = "gotests.html")
# the resulting object from a call to "hyperGTest" belong to the class of objects GOHyperGResult.
# We can access to this info using:
# therefore, storing the results in a data.frame object enables an automatic processing and filtering of the results:
goresults <- summary(hgOver)
head(goresults)
# We can extract the genes that enrich each GO term and paste it to the result as follows:
geneIDs <- geneIdsByCategory(hgOver)[goresults$GOBPID]
head(geneIDs)
goresults <- goresults[goresults$Size >= 5 & goresults$Count >= 5, ]
goresults <- goresults[order(goresults$OddsRatio, decreasing = TRUE), ]
head(goresults)
head(geneCounts(hgOver))
goresults[1:10]
goresults[1:10,]
geneCounts(hgOver)
head(goresults)
summary(hgOver)
hgOver
##EDGE LIST
edge_list_res <- read.table("Dataset1/network_edge_list_ENCODE.csv",header=TRUE,fill = TRUE)
head(edge_list_res)
#create a dictionary for the edge_list
edge_dict <- vector(mode="list", length=length(ann_dict_res$ALIAS))
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
edge_dict<-table_mapping$ENTREZID
names(edge_dict) <- gsub("mir", "hsa-miR", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
edge_dict
edge_dict
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = FALSE,quote = FALSE)
edge_dict
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = FALSE,quote = FALSE)
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",col.names = TRUE,quote = FALSE)
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row_names=TRUE,col.names = FALSE,quote = FALSE)
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=TRUE,col.names = FALSE,quote = FALSE)
#create a dictionary for the edge_list
edge_dict <- vector(mode="list", length=length(ann_dict_res$ALIAS))
table_mapping<-select(org.Hs.eg.db, keys = ann_dict_res$ALIAS, columns = "ENTREZID", keytype ="ALIAS")
#table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict<-table_mapping$ENTREZID
names(edge_dict) <- gsub("mir", "hsa-miR", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
edge_dict
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=TRUE,col.names = FALSE,quote = FALSE)
list(edge_dict)
list(names(edge_dict)=edge_dict)
#table_mapping<-table_mapping[!duplicated(table_mapping[,1]),]
edge_dict<-table_mapping$ENTREZID
names(edge_dict) <- gsub("mir", "hsa-miR", table_mapping$ALIAS)
names(edge_dict) <- gsub("let", "hsa-let", names(edge_dict))
## write in a file the edge_dict
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=TRUE,col.names = FALSE,quote = FALSE)
## write in a file the edge_dict
as.data.frame(edge_dict)
## write in a file the edge_dict
as.data.frame(edge_dict,row.names = names(edge_dict))
write.table(edge_dict,"mapping_id_to_entrez.txt",row.names=names(edge_dict),col.names = FALSE,quote = FALSE)
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
##get dict para el dynamical routing
geneIDs_to_dict <- geneIDs[1:10]
geneId_to_file<-sapply(names(geneIDs_to_dict),function(x) paste(x,paste(geneIDs_to_dict[[x]],collapse=" ")))
geneId_to_file
